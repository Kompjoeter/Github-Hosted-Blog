<i>This is a GitHub-hosted blog made by RanDByyp aka Joran de Boer.</i>
<br><br>
Back when I was working on my website, I was considering adding a blog to it. I quickly realized that adding lengthy blogposts to my HTML wasn't gonna cut it. I needed a server to store all my blogposts, but I wasn't really sure what that actually meant or how it worked. Since it was just an experiment, I started looking into easier (And free) ways to do this.
<br><br>
Eventually I stumbled upon the javascript 'fetch' function and was already familiar with JSON and deploying projects from Github. After doing some prototyping I came up with an idea.
<br><br>
I decided to store everything in one GitHub repository. 
<br><br>
The content of the blogposts is stored in .txt's, a .json file holds the data of the blogposts like 'title','date' and an url to the .txt file. This all is applied to my webpage and is navigable with a menu.
<br><br>
The project can still be optimized, but it works and for a simple blog it does the trick.
<br><br>
In the future I might look into adding 'sorting of blogposts' by date, alphabet or even category and make it so that the ordering of the blogposts on the webpage is not dependent on the order of the objects in the json array.
<br><br>
<h2>How does it work?</h2>
<br>
To display a blogpost, the program grabs a .json file from its repository using 'fetch'. The json file consists of an array filled with objects, each object containing a 'title', 'date' and 'file'.
<br><br>
The <b>'title'</b> is a simple string with the title of the post. It gets applied to the correct HTML element.
<br>
Same goes for <b>'date'</b>, which is a simple string with the date of the post. It gets applied to the correct HTML element.
<br>
The <b>'file'</b> holds a string with an url which links to a .txt file in a folder inside the project's repository.
<br><br>
This .txt file holds the text for the blog post (The text you are reading right now!), so the actual post content. It is applied to the correct HTML element as if it was actual HTML code using 'innerHTML'.
<br><br>
For every blogpost (So, for every object in the the array in the .json file) a button is created in the menu displaying the title of said blogpost. 
<br><br>
Furthermore, the blogpsots can be navigated with 'first', 'previous', 'next' and 'last' buttons, if able.

